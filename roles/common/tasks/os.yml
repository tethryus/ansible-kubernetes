---

# --------- OS - update all packages

- name: Node - setup - OS - update all packages
  ansible.builtin.apt:
    upgrade: dist
    update_cache: true
  become: true

# --------- Setup Time
- name: Node - setup - time - set timezone
  ansible.builtin.timezone:
    name: "{{ os.time.timezone }}"

- name: Node - setup - time - set NTP server
  ansible.builtin.replace:
    path: /etc/systemd/timesyncd.conf
    regexp: "#NTP=.*$"
    replace: "NTP={{ os.time.ntp.server }}"
  when: os.time.ntp.server is not undefined

- name: Node - setup - time - enable ubuntu fallback
  ansible.builtin.replace:
    path: /etc/systemd/timesyncd.conf
    regexp: "#FallbackNTP=ntp.ubuntu.com"
    replace: "FallbackNTP=ntp.ubuntu.com"
  when: os.time.ntp.server is not undefined

- name: Node - setup - time - restart timesyncd
  ansible.builtin.systemd:
    state: restarted
    name: systemd-timesyncd
  changed_when: false
  become: true

# --------- Setup Swap
- name: Node - setup - turn off swap for current session
  ansible.builtin.command: swapoff -a
  changed_when: false
  become: true

- name: Node - setup - remove swap from fstab
  ansible.builtin.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none
  become: true

# --------- Fix DNS using resolv

- name: Node - setup - dns - fix resolved link
  ansible.builtin.file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
    mode: 0644
  become: true

- name: Node - setup - dns - restart resolved
  ansible.builtin.systemd:
    state: restarted
    name: systemd-resolved
  changed_when: false
  become: true

# --- Install base software

- name: Node - setup - software - base
  ansible.builtin.apt:
    pkg: [nfs-common, git, ncdu, curl, wget]
  become: true

- name: Node - setup - software - setup dependencies
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common
  become: true

- name: Node - setup - uninstall snapd
  become: true
  ansible.builtin.apt:
    pkg:
      - snapd
      - gnome-software-plugin-snap
    state: absent
    purge: true

- name: Node - setup - remove user snap directory
  ansible.builtin.file:
    path: ~{{ ansible_facts.user_id }}/snap
    state: absent

- name: Node - setup -remove cache directory for snap
  become: true
  ansible.builtin.file:
    path: /var/cache/snapd
    state: absent

# --- Install ISCSI software

- name: Node - setup - iscsi - install tool
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - open-iscsi
    - lsscsi
    - sg3-utils
    - multipath-tools
    - scsitools
  become: true

- name: Node - setup - iscsi - modprobe modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - iscsi_tcp
  become: true

- name: Node - setup - iscsi - set initator name
  ansible.builtin.copy:
    dest: "/etc/iscsi/initiatorname.iscsi"
    content: |
      InitiatorName={{ iscsi.initiator_name }}:{{ ansible_hostname }}
    mode: 0644
  register: _initiator_changed
  become: true

- name: Node - setup - iscsi - restart iscsid due to initiator change
  when: _initiator_changed.changed
  ansible.builtin.service:
    name: iscsid
    state: restarted
  changed_when: false
  become: true

- name: Node - setup - iscsi - restart open-iscsi due to initiator change
  ansible.builtin.service:
    name: open-iscsi
    state: restarted
  changed_when: false
  become: true

- name: Node - setup - iscsi - multipath config
  ansible.builtin.copy:
    dest: "/etc/multipath.conf"
    mode: 0644
    content: |
      defaults {
          user_friendly_names yes
          find_multipaths yes
          polling_interval 3
          max_fds 8192
      }

      devices {
          device {
              vendor "STARWIND"
              product "STARWIND*"
              path_grouping_policy multibus
              path_checker "tur"
              failback immediate
              path_selector "round-robin 0"
              rr_min_io 3
              rr_weight uniform
              hardware_handler "1 alua"
          }

      }

      # blacklist {
      #     devNode "^sd[a-z0-9]+"
      # }
  become: true

- name: Node - setup - iscsi - enable open-iscsi
  ansible.builtin.systemd:
    enabled: true
    name: open-iscsi
  become: true

- name: Node - setup - iscsi - enable multipath-tools
  ansible.builtin.systemd:
    enabled: true
    name: multipath-tools.service
  become: true

- name: Node - setup - iscsi - start open-iscsi
  ansible.builtin.service:
    name: open-iscsi
    state: started
  changed_when: false
  become: true

- name: Node - setup - iscsi - restart multipath-tools
  ansible.builtin.service:
    name: multipath-tools
    state: restarted
  changed_when: false
  become: true

# ---  Install containerd

- name: Node - setup - containerd - docker GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Node - setup - containerd - docker repository
  ansible.builtin.apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Node - setup - containerd - install
  ansible.builtin.apt:
    name: "{{ 'containerd.io' if ((containerd.version is undefined) or (containerd.version == None) or \
      (containerd.version == 'latest')) else 'containerd.io=' + (containerd.version | string | default('')) }}"
  become: true

- name: Node - setup - containerd - modules
  ansible.builtin.copy:
    dest: "/etc/modules-load.d/containerd.conf"
    content: |
      overlay
      br_netfilter
    mode: 0644
  become: true

- name: Node - setup - containerd - modprobe modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter
  become: true

- name: Node - setup - containerd - systctl fixes
  ansible.builtin.copy:
    dest: "/etc/sysctl.d/kubernetes.conf"
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    mode: 0644
  become: true

- name: Node - setup - containerd - systctl register
  ansible.builtin.command: sysctl --system
  changed_when: false
  become: true

- name: Node - setup - containerd - directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: 0755
  become: true

- name: Node - setup - containerd - load containerd default config
  ansible.builtin.command: "containerd config default"
  register: containerd_config_default
  changed_when: false

- name: Node - setup - containerd - write containerd default config to disk
  ansible.builtin.copy:
    dest: "/etc/containerd/config.toml.default"
    content: "{{ containerd_config_default.stdout }}"
    mode: 0644
  changed_when: false

- name: Node - setup - containerd - write containerd kubernetes config template to disk
  ansible.builtin.copy:
    src: "/etc/containerd/config.toml.default"
    remote_src: true
    dest: "/etc/containerd/config.toml.default_kubernetes"
    mode: 0644
  changed_when: false
  become: true

- name: Node - setup - containerd - enable SystemdCgroup in kubernetes config template
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml.default_kubernetes
    regexp: "^(.*)SystemdCgroup(.*)$"
    line: '            SystemdCgroup = true'
    state: present
    backrefs: true
  changed_when: false
  become: true

- name: Node - setup - containerd - apply containerd kubernetes config
  ansible.builtin.copy:
    src: "/etc/containerd/config.toml.default_kubernetes"
    remote_src: true
    dest: "/etc/containerd/config.toml"
    mode: 0644
  become: true

- name: Node - setup - containerd - restart containerd
  ansible.builtin.systemd:
    state: restarted
    name: containerd
  changed_when: false
  become: true

- name: Node - setup - containerd - crictl - download
  ansible.builtin.get_url:
    url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/\
          v{{ containerd.crictl.version }}/crictl-v{{ containerd.crictl.version }}-linux-amd64.tar.gz"
    dest: "/tmp/crictl-v{{ containerd.crictl.version }}-linux-amd64.tar.gz"
    mode: 0644

- name: Node - setup - containerd - crictl - extract
  ansible.builtin.unarchive:
    src: "/tmp/crictl-v{{ containerd.crictl.version }}-linux-amd64.tar.gz"
    dest: "/usr/local/bin"
    mode: +x
    remote_src: true

- name: Node - setup - containerd - crictl - get containerd info
  ansible.builtin.command: crictl --debug -r unix:///run/containerd/containerd.sock info
  register: results
  changed_when: false
  become: true
